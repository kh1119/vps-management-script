#!/bin/bash

# =============================================================================
# Module 10: Qu·∫£n l√Ω Website (10_manage_website.sh)
# M·ª•c ti√™u: T·∫°o, x√≥a, li·ªát k√™ v√† qu·∫£n l√Ω website tr√™n server
# =============================================================================

set -e

# Import c·∫•u h√¨nh
SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../../../" && pwd)"
source "$SCRIPT_ROOT/config.sh"

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# H√†m hi·ªÉn th·ªã menu
show_website_menu() {
    while true; do
        cat << EOF

============================================
           üåê QU·∫¢N L√ù WEBSITE
============================================

1. üìù T·∫°o website m·ªõi
2. üìã Li·ªát k√™ t·∫•t c·∫£ website
3. ‚úèÔ∏è  Ch·ªânh s·ª≠a c·∫•u h√¨nh website
4. üîÑ K√≠ch ho·∫°t/V√¥ hi·ªáu h√≥a website
5. üîí C√†i ƒë·∫∑t SSL cho website
6. üóëÔ∏è  X√≥a website
7. üìä Th·ªëng k√™ website
8. üîô Quay l·∫°i menu ch√≠nh

EOF

        echo -n "Ch·ªçn t√πy ch·ªçn (1-8): "
        read -r choice
        
        case $choice in
            1) create_website ;;
            2) list_websites ;;
            3) edit_website ;;
            4) toggle_website ;;
            5) install_ssl ;;
            6) delete_website ;;
            7) website_stats ;;
            8) return 0 ;;
            *)
                log_warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
                ;;
        esac
    done
}

# H√†m t·∫°o website m·ªõi
create_website() {
    log_info "=== T·∫†O WEBSITE M·ªöI ==="
    
    # Nh·∫≠p th√¥ng tin website
    echo -n "Nh·∫≠p t√™n domain (vd: example.com): "
    read -r domain
    
    # Validate domain
    if [[ ! "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        log_error "T√™n domain kh√¥ng h·ª£p l·ªá!"
        return 1
    fi
    
    # Ki·ªÉm tra domain ƒë√£ t·ªìn t·∫°i ch∆∞a
    if [[ -f "/etc/nginx/sites-available/$domain" ]]; then
        log_error "Website $domain ƒë√£ t·ªìn t·∫°i!"
        return 1
    fi
    
    # Ch·ªçn phi√™n b·∫£n PHP
    echo ""
    echo "Ch·ªçn phi√™n b·∫£n PHP:"
    select php_version in "${PHP_VERSIONS[@]}"; do
        if [[ -n "$php_version" ]]; then
            break
        fi
    done
    
    # Ch·ªçn lo·∫°i website
    echo ""
    echo "Ch·ªçn lo·∫°i website:"
    echo "1. Static HTML"
    echo "2. PHP"
    echo "3. WordPress"
    echo "4. Laravel"
    echo -n "L·ª±a ch·ªçn (1-4): "
    read -r site_type
    
    case $site_type in
        1) site_type_name="static" ;;
        2) site_type_name="php" ;;
        3) site_type_name="wordpress" ;;
        4) site_type_name="laravel" ;;
        *) site_type_name="php" ;;
    esac
    
    # T·∫°o th∆∞ m·ª•c website
    web_root="/var/www/$domain"
    mkdir -p "$web_root/public"
    mkdir -p "$web_root/logs"
    
    # T·∫°o file c·∫•u h√¨nh Nginx
    create_nginx_config "$domain" "$php_version" "$site_type_name"
    
    # T·∫°o n·ªôi dung m·∫∑c ƒë·ªãnh
    create_default_content "$domain" "$web_root" "$site_type_name"
    
    # Set quy·ªÅn
    chown -R www-data:www-data "$web_root"
    chmod -R 755 "$web_root"
    
    # K√≠ch ho·∫°t site
    ln -sf "/etc/nginx/sites-available/$domain" "/etc/nginx/sites-enabled/$domain"
    
    # Test c·∫•u h√¨nh Nginx
    if nginx -t; then
        systemctl reload nginx
        log_success "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
        log_info "ƒê∆∞·ªùng d·∫´n: $web_root"
        log_info "URL: http://$domain"
        log_info "PHP Version: $php_version"
        log_info "Lo·∫°i: $site_type_name"
    else
        log_error "L·ªói c·∫•u h√¨nh Nginx!"
        rm -f "/etc/nginx/sites-available/$domain"
        rm -f "/etc/nginx/sites-enabled/$domain"
        rm -rf "$web_root"
        return 1
    fi
    
    # T·∫°o database n·∫øu c·∫ßn
    if [[ "$site_type_name" == "wordpress" || "$site_type_name" == "laravel" ]]; then
        create_database "$domain"
    fi
    
    echo ""
    echo -n "B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t SSL ngay kh√¥ng? (y/N): "
    read -r install_ssl_now
    if [[ "$install_ssl_now" =~ ^[Yy]$ ]]; then
        install_ssl_for_domain "$domain"
    fi
}

# H√†m t·∫°o c·∫•u h√¨nh Nginx
create_nginx_config() {
    local domain="$1"
    local php_version="$2"
    local site_type="$3"
    
    local template_file="$TEMPLATES_DIR/nginx/site.conf"
    local config_file="/etc/nginx/sites-available/$domain"
    
    # Copy template v√† thay th·∫ø c√°c bi·∫øn
    cp "$template_file" "$config_file"
    
    sed -i "s/{{DOMAIN}}/$domain/g" "$config_file"
    sed -i "s/{{WEB_ROOT}}/\/var\/www\/$domain/g" "$config_file"
    sed -i "s/{{PHP_VERSION}}/$php_version/g" "$config_file"
    sed -i "s/{{LOG_PATH}}/\/var\/www\/$domain\/logs/g" "$config_file"
    
    # Th√™m c·∫•u h√¨nh ƒë·∫∑c bi·ªát theo lo·∫°i site
    case "$site_type" in
        "wordpress")
            add_wordpress_config "$config_file"
            ;;
        "laravel")
            add_laravel_config "$config_file"
            ;;
    esac
}

# H√†m th√™m c·∫•u h√¨nh WordPress
add_wordpress_config() {
    local config_file="$1"
    
    cat >> "$config_file" << 'EOF'
    
    # WordPress specific configurations
    location = /wp-admin/admin-ajax.php {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php{{PHP_VERSION}}-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
    
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    location ~* \.(pdf|css|html|js|swf)$ {
        expires 2d;
    }
EOF
}

# H√†m th√™m c·∫•u h√¨nh Laravel
add_laravel_config() {
    local config_file="$1"
    
    sed -i 's/root \/var\/www\/{{DOMAIN}};/root \/var\/www\/{{DOMAIN}}\/public;/' "$config_file"
    
    cat >> "$config_file" << 'EOF'
    
    # Laravel specific configurations
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }
    
    error_page 404 /index.php;
EOF
}

# H√†m t·∫°o n·ªôi dung m·∫∑c ƒë·ªãnh
create_default_content() {
    local domain="$1"
    local web_root="$2"
    local site_type="$3"
    
    case "$site_type" in
        "static")
            create_static_content "$domain" "$web_root"
            ;;
        "php")
            create_php_content "$domain" "$web_root"
            ;;
        "wordpress")
            create_wordpress_content "$domain" "$web_root"
            ;;
        "laravel")
            create_laravel_content "$domain" "$web_root"
            ;;
    esac
}

# H√†m t·∫°o n·ªôi dung static
create_static_content() {
    local domain="$1"
    local web_root="$2"
    
    cat > "$web_root/index.html" << EOF
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>$domain - Ch√†o m·ª´ng</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 600px; margin: 0 auto; }
        h1 { color: #333; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi $domain!</h1>
        <div class="info">
            <p>Website c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.</p>
            <p>B·∫°n c√≥ th·ªÉ upload file c·ªßa m√¨nh v√†o th∆∞ m·ª•c: <code>$web_root</code></p>
        </div>
        <p><small>ƒê∆∞·ª£c t·∫°o b·ªüi VPS Management Script</small></p>
    </div>
</body>
</html>
EOF
}

# H√†m t·∫°o n·ªôi dung PHP
create_php_content() {
    local domain="$1"
    local web_root="$2"
    
    cat > "$web_root/index.php" << EOF
<?php
// Welcome page for $domain
?>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo '$domain'; ?> - PHP Website</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 600px; margin: 0 auto; }
        h1 { color: #333; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .php-info { background: #e8f4fd; padding: 15px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üêò Ch√†o m·ª´ng ƒë·∫øn v·ªõi <?php echo '$domain'; ?>!</h1>
        <div class="info">
            <p>Website PHP c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.</p>
            <p>Th∆∞ m·ª•c web: <code>$web_root</code></p>
        </div>
        <div class="php-info">
            <h3>Th√¥ng tin PHP:</h3>
            <p>PHP Version: <?php echo PHP_VERSION; ?></p>
            <p>Server Time: <?php echo date('d/m/Y H:i:s'); ?></p>
            <p>Document Root: <?php echo \$_SERVER['DOCUMENT_ROOT']; ?></p>
        </div>
        <p><small>ƒê∆∞·ª£c t·∫°o b·ªüi VPS Management Script</small></p>
    </div>
</body>
</html>
EOF
}

# H√†m t·∫°o placeholder WordPress
create_wordpress_content() {
    local domain="$1"
    local web_root="$2"
    
    cat > "$web_root/index.php" << EOF
<?php
// WordPress placeholder for $domain
?>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo '$domain'; ?> - WordPress Ready</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 600px; margin: 0 auto; }
        h1 { color: #333; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .command { background: #333; color: #fff; padding: 10px; border-radius: 3px; font-family: monospace; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìù <?php echo '$domain'; ?> - S·∫µn s√†ng cho WordPress</h1>
        <div class="info">
            <p>Website ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã cho WordPress.</p>
            <p>ƒê·ªÉ c√†i ƒë·∫∑t WordPress, ch·∫°y l·ªánh:</p>
            <div class="command">
                cd $web_root && wp core download --locale=vi
            </div>
        </div>
        <p><small>ƒê∆∞·ª£c t·∫°o b·ªüi VPS Management Script</small></p>
    </div>
</body>
</html>
EOF
}

# H√†m t·∫°o placeholder Laravel
create_laravel_content() {
    local domain="$1"
    local web_root="$2"
    
    mkdir -p "$web_root/public"
    
    cat > "$web_root/public/index.php" << EOF
<?php
// Laravel placeholder for $domain
?>
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><?php echo '$domain'; ?> - Laravel Ready</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 600px; margin: 0 auto; }
        h1 { color: #333; }
        .info { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .command { background: #333; color: #fff; padding: 10px; border-radius: 3px; font-family: monospace; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ <?php echo '$domain'; ?> - S·∫µn s√†ng cho Laravel</h1>
        <div class="info">
            <p>Website ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã cho Laravel.</p>
            <p>ƒê·ªÉ t·∫°o project Laravel m·ªõi, ch·∫°y l·ªánh:</p>
            <div class="command">
                cd /var/www && composer create-project laravel/laravel $domain
            </div>
        </div>
        <p><small>ƒê∆∞·ª£c t·∫°o b·ªüi VPS Management Script</small></p>
    </div>
</body>
</html>
EOF
}

# H√†m t·∫°o database
create_database() {
    local domain="$1"
    local db_name
    local db_user
    local db_password
    
    # T·∫°o t√™n database v√† user t·ª´ domain
    db_name=$(echo "$domain" | sed 's/\./_/g' | sed 's/-/_/g')
    db_user="$db_name"
    db_password=$(generate_password 16)
    
    echo ""
    log_info "T·∫°o database cho website..."
    
    # T·∫°o database v√† user
    mysql << EOF
CREATE DATABASE IF NOT EXISTS $db_name DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '$db_user'@'localhost' IDENTIFIED BY '$db_password';
GRANT ALL PRIVILEGES ON $db_name.* TO '$db_user'@'localhost';
FLUSH PRIVILEGES;
EOF

    log_success "Database ƒë√£ ƒë∆∞·ª£c t·∫°o!"
    log_info "Database: $db_name"
    log_info "User: $db_user"
    log_info "Password: $db_password"
    
    # L∆∞u th√¥ng tin database
    cat >> "$CREDENTIALS_FILE" << EOF

# Database for $domain
${domain//./_}_DB_NAME=$db_name
${domain//./_}_DB_USER=$db_user
${domain//./_}_DB_PASSWORD=$db_password

EOF
}

# H√†m li·ªát k√™ website
list_websites() {
    log_info "=== DANH S√ÅCH WEBSITE ==="
    
    echo ""
    echo "üü¢ Website ƒëang ho·∫°t ƒë·ªông:"
    if ls /etc/nginx/sites-enabled/ >/dev/null 2>&1; then
        for site in /etc/nginx/sites-enabled/*; do
            if [[ -f "$site" && "$(basename "$site")" != "default" ]]; then
                local domain=$(basename "$site")
                local web_root="/var/www/$domain"
                local status="üü¢"
                
                # Ki·ªÉm tra SSL
                if grep -q "ssl_certificate" "$site"; then
                    local ssl_status="üîí SSL"
                else
                    local ssl_status="üîì No SSL"
                fi
                
                echo "  $domain - $ssl_status - $web_root"
            fi
        done
    else
        echo "  Kh√¥ng c√≥ website n√†o ƒëang ho·∫°t ƒë·ªông"
    fi
    
    echo ""
    echo "üî¥ Website ƒë√£ t·∫Øt:"
    for site in /etc/nginx/sites-available/*; do
        if [[ -f "$site" ]]; then
            local domain=$(basename "$site")
            if [[ "$domain" != "default" && "$domain" != "phpmyadmin" && ! -L "/etc/nginx/sites-enabled/$domain" ]]; then
                echo "  $domain (disabled)"
            fi
        fi
    done
}

# H√†m c√†i ƒë·∫∑t SSL
install_ssl() {
    echo -n "Nh·∫≠p domain c·∫ßn c√†i SSL: "
    read -r domain
    
    if [[ ! -f "/etc/nginx/sites-available/$domain" ]]; then
        log_error "Website $domain kh√¥ng t·ªìn t·∫°i!"
        return 1
    fi
    
    install_ssl_for_domain "$domain"
}

# H√†m c√†i ƒë·∫∑t SSL cho domain
install_ssl_for_domain() {
    local domain="$1"
    
    log_info "C√†i ƒë·∫∑t SSL cho $domain..."
    
    # Ki·ªÉm tra domain c√≥ tr·ªè v·ªÅ server n√†y kh√¥ng
    local server_ip=$(curl -s ifconfig.me)
    local domain_ip=$(dig +short "$domain" A | tail -n1)
    
    if [[ "$server_ip" != "$domain_ip" ]]; then
        log_warning "Domain $domain kh√¥ng tr·ªè v·ªÅ server n√†y!"
        log_info "Server IP: $server_ip"
        log_info "Domain IP: $domain_ip"
        echo -n "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): "
        read -r confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            return 0
        fi
    fi
    
    # C√†i ƒë·∫∑t SSL certificate
    if certbot --nginx -d "$domain" --non-interactive --agree-tos --email "admin@$domain"; then
        log_success "SSL ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t cho $domain!"
        log_info "URL: https://$domain"
    else
        log_error "L·ªói c√†i ƒë·∫∑t SSL cho $domain!"
    fi
}

# H√†m x√≥a website
delete_website() {
    echo -n "Nh·∫≠p domain c·∫ßn x√≥a: "
    read -r domain
    
    if [[ ! -f "/etc/nginx/sites-available/$domain" ]]; then
        log_error "Website $domain kh√¥ng t·ªìn t·∫°i!"
        return 1
    fi
    
    echo ""
    log_warning "‚ö†Ô∏è  C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a ho√†n to√†n website $domain!"
    echo "Bao g·ªìm:"
    echo "  - File c·∫•u h√¨nh Nginx"
    echo "  - Th∆∞ m·ª•c web (/var/www/$domain)"
    echo "  - Database (n·∫øu c√≥)"
    echo ""
    echo -n "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a? G√µ 'YES' ƒë·ªÉ x√°c nh·∫≠n: "
    read -r confirm
    
    if [[ "$confirm" != "YES" ]]; then
        log_info "H·ªßy b·ªè x√≥a website."
        return 0
    fi
    
    # X√≥a SSL certificate n·∫øu c√≥
    if certbot certificates 2>/dev/null | grep -q "$domain"; then
        log_info "X√≥a SSL certificate..."
        certbot delete --cert-name "$domain" --non-interactive
    fi
    
    # T·∫Øt site
    rm -f "/etc/nginx/sites-enabled/$domain"
    
    # X√≥a c·∫•u h√¨nh Nginx
    rm -f "/etc/nginx/sites-available/$domain"
    
    # Backup v√† x√≥a th∆∞ m·ª•c web
    if [[ -d "/var/www/$domain" ]]; then
        log_info "Backup th∆∞ m·ª•c web..."
        tar -czf "$BACKUP_DIR/website_${domain}_$(date +%Y%m%d_%H%M%S).tar.gz" -C /var/www "$domain"
        rm -rf "/var/www/$domain"
    fi
    
    # Reload Nginx
    nginx -t && systemctl reload nginx
    
    log_success "Website $domain ƒë√£ ƒë∆∞·ª£c x√≥a!"
    log_info "Backup ƒë∆∞·ª£c l∆∞u t·∫°i: $BACKUP_DIR/"
}

# H√†m toggle website
toggle_website() {
    echo -n "Nh·∫≠p domain: "
    read -r domain
    
    if [[ ! -f "/etc/nginx/sites-available/$domain" ]]; then
        log_error "Website $domain kh√¥ng t·ªìn t·∫°i!"
        return 1
    fi
    
    if [[ -L "/etc/nginx/sites-enabled/$domain" ]]; then
        # T·∫Øt website
        rm "/etc/nginx/sites-enabled/$domain"
        systemctl reload nginx
        log_success "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫Øt"
    else
        # B·∫≠t website
        ln -sf "/etc/nginx/sites-available/$domain" "/etc/nginx/sites-enabled/$domain"
        if nginx -t; then
            systemctl reload nginx
            log_success "Website $domain ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t"
        else
            rm "/etc/nginx/sites-enabled/$domain"
            log_error "L·ªói c·∫•u h√¨nh Nginx!"
        fi
    fi
}

# Placeholder functions
edit_website() {
    log_info "Ch·ª©c nƒÉng ch·ªânh s·ª≠a website ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
}

website_stats() {
    log_info "=== TH·ªêNG K√ä WEBSITE ==="
    
    local total_sites=$(ls /etc/nginx/sites-available/ | grep -v default | wc -l)
    local active_sites=$(ls /etc/nginx/sites-enabled/ | grep -v default | wc -l)
    local ssl_sites=$(grep -l "ssl_certificate" /etc/nginx/sites-available/* 2>/dev/null | wc -l)
    
    echo "üìä T·ªïng quan:"
    echo "  ‚Ä¢ T·ªïng s·ªë website: $total_sites"
    echo "  ‚Ä¢ Website ƒëang ho·∫°t ƒë·ªông: $active_sites"
    echo "  ‚Ä¢ Website c√≥ SSL: $ssl_sites"
    
    echo ""
    echo "üíæ Dung l∆∞·ª£ng s·ª≠ d·ª•ng:"
    du -sh /var/www/* 2>/dev/null | head -10
}

# Ch·∫°y menu ch√≠nh
show_website_menu
