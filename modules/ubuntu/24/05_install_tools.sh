#!/bin/bash

# =============================================================================
# Module 05: C√†i ƒë·∫∑t Tools (05_install_tools.sh)
# M·ª•c ti√™u: C√†i ƒë·∫∑t Certbot, phpMyAdmin v√† c√°c c√¥ng c·ª• thi·∫øt y·∫øu kh√°c
# =============================================================================

set -e

# Import c·∫•u h√¨nh
source "$(dirname "$(dirname "$(dirname "${BASH_SOURCE[0]}")")")/config.sh"

log_info "=== B∆Ø·ªöC 6: C√ÄI ƒê·∫∂T TOOLS ==="

# C√†i ƒë·∫∑t Certbot
log_info "C√†i ƒë·∫∑t Certbot..."
apt install -y certbot python3-certbot-nginx

# T·∫°o script t·ª± ƒë·ªông gia h·∫°n SSL
cat > /root/ssl_renewal.sh << 'EOF'
#!/bin/bash

# Script t·ª± ƒë·ªông gia h·∫°n SSL certificates
LOG_FILE="/var/log/ssl_renewal.log"

echo "$(date): B·∫Øt ƒë·∫ßu ki·ªÉm tra gia h·∫°n SSL..." >> "$LOG_FILE"

# Gia h·∫°n certificates
certbot renew --quiet --nginx >> "$LOG_FILE" 2>&1

# Reload Nginx
systemctl reload nginx

echo "$(date): Ho√†n t·∫•t ki·ªÉm tra gia h·∫°n SSL." >> "$LOG_FILE"
EOF

chmod +x /root/ssl_renewal.sh

# Th√™m cron job t·ª± ƒë·ªông gia h·∫°n SSL (h√†ng ng√†y l√∫c 4:00 AM)
(crontab -l 2>/dev/null; echo "0 4 * * * /root/ssl_renewal.sh") | crontab -

log_success "Certbot ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh t·ª± ƒë·ªông gia h·∫°n!"

# C√†i ƒë·∫∑t phpMyAdmin
log_info "C√†i ƒë·∫∑t phpMyAdmin..."

# Download phpMyAdmin
PMA_VERSION="5.2.1"
PMA_URL="https://files.phpmyadmin.net/phpMyAdmin/$PMA_VERSION/phpMyAdmin-$PMA_VERSION-all-languages.tar.gz"

cd /tmp
wget -q "$PMA_URL"
tar -xzf "phpMyAdmin-$PMA_VERSION-all-languages.tar.gz"

# Di chuy·ªÉn phpMyAdmin ƒë·∫øn th∆∞ m·ª•c web
mv "phpMyAdmin-$PMA_VERSION-all-languages" /var/www/html/phpmyadmin
rm "phpMyAdmin-$PMA_VERSION-all-languages.tar.gz"

# T·∫°o th∆∞ m·ª•c tmp cho phpMyAdmin
mkdir -p /var/www/html/phpmyadmin/tmp
chown -R www-data:www-data /var/www/html/phpmyadmin
chmod 755 /var/www/html/phpmyadmin/tmp

# L·∫•y th√¥ng tin database phpMyAdmin t·ª´ credentials
PMA_DB_PASSWORD=$(grep "PMA_DB_PASSWORD" "$CREDENTIALS_FILE" | cut -d'=' -f2)

# T·∫°o c·∫•u h√¨nh phpMyAdmin
log_info "C·∫•u h√¨nh phpMyAdmin..."

# T·∫°o blowfish secret
PMA_BLOWFISH_SECRET=$(generate_blowfish_secret)

cat > /var/www/html/phpmyadmin/config.inc.php << EOF
<?php
/**
 * phpMyAdmin configuration
 * Generated by VPS Management Script
 */

// Basic settings
\$cfg['blowfish_secret'] = '$PMA_BLOWFISH_SECRET';
\$cfg['DefaultLang'] = 'vi';
\$cfg['ServerDefault'] = 1;
\$cfg['UploadDir'] = '$PMA_UPLOAD_DIR';
\$cfg['SaveDir'] = '$PMA_TEMP_DIR';

// Servers configuration
\$i = 0;

// First server (localhost)
\$i++;
\$cfg['Servers'][\$i]['auth_type'] = 'cookie';
\$cfg['Servers'][\$i]['host'] = 'localhost';
\$cfg['Servers'][\$i]['compress'] = false;
\$cfg['Servers'][\$i]['AllowNoPassword'] = false;

// Control database settings
\$cfg['Servers'][\$i]['controlhost'] = 'localhost';
\$cfg['Servers'][\$i]['controlport'] = '';
\$cfg['Servers'][\$i]['controluser'] = 'phpmyadmin';
\$cfg['Servers'][\$i]['controlpass'] = '$PMA_DB_PASSWORD';
\$cfg['Servers'][\$i]['pmadb'] = 'phpmyadmin';
\$cfg['Servers'][\$i]['bookmarktable'] = 'pma__bookmark';
\$cfg['Servers'][\$i]['relation'] = 'pma__relation';
\$cfg['Servers'][\$i]['table_info'] = 'pma__table_info';
\$cfg['Servers'][\$i]['table_coords'] = 'pma__table_coords';
\$cfg['Servers'][\$i]['pdf_pages'] = 'pma__pdf_pages';
\$cfg['Servers'][\$i]['column_info'] = 'pma__column_info';
\$cfg['Servers'][\$i]['history'] = 'pma__history';
\$cfg['Servers'][\$i]['table_uiprefs'] = 'pma__table_uiprefs';
\$cfg['Servers'][\$i]['tracking'] = 'pma__tracking';
\$cfg['Servers'][\$i]['userconfig'] = 'pma__userconfig';
\$cfg['Servers'][\$i]['recent'] = 'pma__recent';
\$cfg['Servers'][\$i]['favorite'] = 'pma__favorite';
\$cfg['Servers'][\$i]['users'] = 'pma__users';
\$cfg['Servers'][\$i]['usergroups'] = 'pma__usergroups';
\$cfg['Servers'][\$i]['navigationhiding'] = 'pma__navigationhiding';
\$cfg['Servers'][\$i]['savedsearches'] = 'pma__savedsearches';
\$cfg['Servers'][\$i]['central_columns'] = 'pma__central_columns';
\$cfg['Servers'][\$i]['designer_settings'] = 'pma__designer_settings';
\$cfg['Servers'][\$i]['export_templates'] = 'pma__export_templates';

// Security settings
\$cfg['LoginCookieValidity'] = 3600;
\$cfg['LoginCookieStore'] = 3600;
\$cfg['LoginCookieDeleteAll'] = true;
\$cfg['UseDbSearch'] = true;
\$cfg['IgnoreMultiSubmitError'] = true;

// Interface settings
\$cfg['ThemeDefault'] = 'pmahomme';
\$cfg['DefaultTabServer'] = 'welcome';
\$cfg['DefaultTabDatabase'] = 'structure';
\$cfg['DefaultTabTable'] = 'sql';
\$cfg['RowActionLinks'] = 'left';
\$cfg['ShowStats'] = true;
\$cfg['ShowServerInfo'] = false;
\$cfg['ShowPhpInfo'] = false;
\$cfg['ShowChgPassword'] = true;
\$cfg['ShowCreateDb'] = true;
\$cfg['SuggestDBName'] = true;

// Export/Import settings
\$cfg['Export']['lock_tables'] = true;
\$cfg['Export']['charset'] = 'utf-8';
\$cfg['Import']['charset'] = 'utf-8';

// SQL query settings
\$cfg['MaxRows'] = 50;
\$cfg['Order'] = 'SMART';
\$cfg['BrowsePointerEnable'] = true;
\$cfg['BrowseMarkerEnable'] = true;

// Error reporting
\$cfg['Error_Handler']['display'] = false;
\$cfg['Error_Handler']['gather'] = false;
?>
EOF

# Import phpMyAdmin database structure
log_info "Import c·∫•u tr√∫c database phpMyAdmin..."
mysql phpmyadmin < /var/www/html/phpmyadmin/sql/create_tables.sql

# T·∫°o c·∫•u h√¨nh Nginx cho phpMyAdmin
log_info "C·∫•u h√¨nh Nginx cho phpMyAdmin..."

cat > /etc/nginx/sites-available/phpmyadmin << 'EOF'
# phpMyAdmin Nginx configuration
location /phpmyadmin {
    alias /var/www/html/phpmyadmin;
    index index.php index.html index.htm;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Rate limiting for phpMyAdmin
    limit_req zone=login burst=5 nodelay;
    
    # Deny access to sensitive files
    location ~ ^/phpmyadmin/(libraries|setup|templates)/ {
        deny all;
    }
    
    location ~ ^/phpmyadmin/(.+\.php)$ {
        alias /var/www/html/phpmyadmin/$1;
        
        # Security checks
        location ~ ^/phpmyadmin/(libraries|setup)/.*\.php$ {
            deny all;
        }
        
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $request_filename;
        include fastcgi_params;
    }
    
    location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
        alias /var/www/html/phpmyadmin/$1;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF

# Include c·∫•u h√¨nh phpMyAdmin v√†o site m·∫∑c ƒë·ªãnh
sed -i '/location ~ \.php\$ {/i\    include /etc/nginx/sites-available/phpmyadmin;\n' /etc/nginx/sites-available/default

# Test v√† reload Nginx
nginx -t && systemctl reload nginx

log_success "phpMyAdmin ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh!"

# C√†i ƒë·∫∑t c√°c c√¥ng c·ª• b·ªï sung
log_info "C√†i ƒë·∫∑t c√°c c√¥ng c·ª• b·ªï sung..."

# Composer
log_info "C√†i ƒë·∫∑t Composer..."
cd /tmp
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer

# WP-CLI
log_info "C√†i ƒë·∫∑t WP-CLI..."
curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/wp-cli.phar
chmod +x wp-cli.phar
mv wp-cli.phar /usr/local/bin/wp

# Node.js v√† npm
log_info "C√†i ƒë·∫∑t Node.js..."
curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
apt install -y nodejs

log_success "ƒê√£ c√†i ƒë·∫∑t Node.js $(node --version) v√† npm $(npm --version)"

# Git configuration
log_info "C·∫•u h√¨nh Git..."
git config --system init.defaultBranch main
git config --system pull.rebase false

# T·∫°o script SSL helper
log_info "T·∫°o script SSL helper..."

cat > /usr/local/bin/ssl-cert << 'EOF'
#!/bin/bash

# SSL Certificate Helper Script
# Usage: ssl-cert <domain> [email]

if [[ $# -lt 1 ]]; then
    echo "S·ª≠ d·ª•ng: $0 <domain> [email]"
    echo "V√≠ d·ª•: $0 example.com admin@example.com"
    exit 1
fi

DOMAIN="$1"
EMAIL="${2:-admin@$DOMAIN}"

echo "üîí T·∫°o SSL certificate cho domain: $DOMAIN"
echo "üìß Email: $EMAIL"

# Ki·ªÉm tra domain c√≥ tr·ªè v·ªÅ server n√†y kh√¥ng
SERVER_IP=$(curl -s ifconfig.me)
DOMAIN_IP=$(dig +short "$DOMAIN" A | tail -n1)

if [[ "$SERVER_IP" != "$DOMAIN_IP" ]]; then
    echo "‚ö†Ô∏è  C·∫£nh b√°o: Domain $DOMAIN kh√¥ng tr·ªè v·ªÅ server n√†y!"
    echo "   Server IP: $SERVER_IP"
    echo "   Domain IP: $DOMAIN_IP"
    echo -n "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): "
    read -r confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "H·ªßy b·ªè."
        exit 0
    fi
fi

# T·∫°o SSL certificate
certbot --nginx -d "$DOMAIN" --email "$EMAIL" --agree-tos --non-interactive

if [[ $? -eq 0 ]]; then
    echo "‚úÖ SSL certificate ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
    echo "üåê https://$DOMAIN"
else
    echo "‚ùå L·ªói t·∫°o SSL certificate!"
    exit 1
fi
EOF

chmod +x /usr/local/bin/ssl-cert

# T·∫°o script qu·∫£n l√Ω site
cat > /usr/local/bin/site-manager << 'EOF'
#!/bin/bash

# Simple Site Manager
# Usage: site-manager <action> [options]

show_help() {
    cat << 'HELP'
Site Manager - Qu·∫£n l√Ω website ƒë∆°n gi·∫£n

S·ª≠ d·ª•ng:
    site-manager list                    - Li·ªát k√™ c√°c site
    site-manager create <domain> [php]   - T·∫°o site m·ªõi
    site-manager delete <domain>         - X√≥a site
    site-manager enable <domain>         - K√≠ch ho·∫°t site
    site-manager disable <domain>        - V√¥ hi·ªáu h√≥a site

V√≠ d·ª•:
    site-manager create example.com 8.3
    site-manager delete example.com
HELP
}

list_sites() {
    echo "=== Danh s√°ch c√°c site ==="
    echo "Enabled sites:"
    ls -1 /etc/nginx/sites-enabled/ 2>/dev/null || echo "  Kh√¥ng c√≥ site n√†o ƒë∆∞·ª£c k√≠ch ho·∫°t"
    echo ""
    echo "Available sites:"
    ls -1 /etc/nginx/sites-available/ 2>/dev/null || echo "  Kh√¥ng c√≥ site n√†o"
}

if [[ $# -eq 0 ]]; then
    show_help
    exit 0
fi

case "$1" in
    list|ls)
        list_sites
        ;;
    help|-h|--help)
        show_help
        ;;
    *)
        echo "Ch·ª©c nƒÉng $1 ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
        echo "S·ª≠ d·ª•ng: site-manager help ƒë·ªÉ xem tr·ª£ gi√∫p"
        ;;
esac
EOF

chmod +x /usr/local/bin/site-manager

# T·∫°o script h·ªá th·ªëng info
cat > /usr/local/bin/server-info << 'EOF'
#!/bin/bash

# Server Information Script
echo "================================================================"
echo "                    SERVER INFORMATION"
echo "================================================================"

echo "üñ•Ô∏è  System Info:"
echo "   OS: $(lsb_release -d | cut -f2)"
echo "   Kernel: $(uname -r)"
echo "   Uptime: $(uptime -p)"
echo "   Load: $(uptime | awk -F'load average:' '{print $2}')"

echo ""
echo "üíæ Memory & Storage:"
echo "   RAM: $(free -h | awk '/^Mem:/{printf "%s / %s (%.1f%%)\n", $3, $2, $3/$2*100}')"
echo "   Disk: $(df -h / | awk 'NR==2{printf "%s / %s (%s used)\n", $3, $2, $5}')"

echo ""
echo "üåê Network:"
echo "   Public IP: $(curl -s ifconfig.me)"
echo "   Private IP: $(hostname -I | awk '{print $1}')"

echo ""
echo "üîß Services Status:"
services=("nginx" "mariadb" "redis-server" "php7.4-fpm" "php8.3-fpm")
for service in "${services[@]}"; do
    if systemctl is-active --quiet "$service"; then
        status="üü¢ Running"
    else
        status="üî¥ Stopped"
    fi
    printf "   %-15s: %s\n" "$service" "$status"
done

echo ""
echo "üìä Quick Stats:"
echo "   Active connections: $(ss -t | wc -l)"
echo "   Running processes: $(ps aux | wc -l)"
echo "   Open files: $(lsof | wc -l)"

echo "================================================================"
EOF

chmod +x /usr/local/bin/server-info

# Set quy·ªÅn cho c√°c file ƒë√£ t·∫°o
chown www-data:www-data /var/www/html/phpmyadmin/config.inc.php
chmod 644 /var/www/html/phpmyadmin/config.inc.php

# Ghi th√¥ng tin v√†o credentials file
cat >> "$CREDENTIALS_FILE" << EOF

# Tools Configuration
CERTBOT_PATH=/usr/bin/certbot
SSL_RENEWAL_SCRIPT=/root/ssl_renewal.sh

# phpMyAdmin
PMA_VERSION=$PMA_VERSION
PMA_PATH=/var/www/html/phpmyadmin
PMA_URL=http://$(hostname -I | awk '{print $1}')/phpmyadmin
PMA_BLOWFISH_SECRET=$PMA_BLOWFISH_SECRET

# Development Tools
COMPOSER_PATH=/usr/local/bin/composer
WP_CLI_PATH=/usr/local/bin/wp
NODE_VERSION=$(node --version)
NPM_VERSION=$(npm --version)

# Helper Scripts
SSL_CERT_HELPER=/usr/local/bin/ssl-cert
SITE_MANAGER=/usr/local/bin/site-manager
SERVER_INFO=/usr/local/bin/server-info

EOF

log_success "Module Tools ho√†n t·∫•t!"

echo ""
echo "=== Th√¥ng tin Tools ƒë√£ c√†i ƒë·∫∑t ==="
echo "üîí Certbot: $(certbot --version | head -1)"
echo "üóÑÔ∏è  phpMyAdmin: v$PMA_VERSION"
echo "   URL: http://$(hostname -I | awk '{print $1}')/phpmyadmin"
echo "üéº Composer: $(composer --version | head -1)"
echo "üìù WP-CLI: $(wp --version)"
echo "üü¢ Node.js: $(node --version)"
echo "üì¶ npm: $(npm --version)"

echo ""
echo "=== C√°c c√¥ng c·ª• helper ==="
echo "‚Ä¢ ssl-cert <domain>     - T·∫°o SSL certificate"
echo "‚Ä¢ site-manager         - Qu·∫£n l√Ω website"
echo "‚Ä¢ server-info          - Th√¥ng tin server"
echo "‚Ä¢ redis-monitor        - Gi√°m s√°t Redis"
echo "‚Ä¢ php-status           - Tr·∫°ng th√°i PHP"
