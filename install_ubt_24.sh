#!/bin/bash

# =============================================================================
# Script C√†i ƒë·∫∑t L√µi cho Ubuntu 24.04 (install_ubt_24.sh)
# M·ª•c ti√™u: C√†i ƒë·∫∑t v√† qu·∫£n l√Ω to√†n b·ªô LEMP stack tr√™n Ubuntu 24.04
# Author: Your Name
# Version: 1.0
# =============================================================================

set -e  # Tho√°t ngay khi c√≥ l·ªói

# Import c·∫•u h√¨nh
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/config.sh"

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Bi·∫øn to√†n c·ª•c
SILENT_MODE=false
CURRENT_USER=$(whoami)

# H√†m hi·ªÉn th·ªã th√¥ng b√°o
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    log_with_timestamp "[INFO] $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    log_with_timestamp "[SUCCESS] $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    log_with_timestamp "[WARNING] $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log_with_timestamp "[ERROR] $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
    log_with_timestamp "[STEP] $1"
}

# H√†m x·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --silent)
                SILENT_MODE=true
                log_info "Ch·∫ø ƒë·ªô im l·∫∑ng ƒë∆∞·ª£c k√≠ch ho·∫°t"
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                log_warning "Tham s·ªë kh√¥ng x√°c ƒë·ªãnh: $1"
                shift
                ;;
        esac
    done
}

# H√†m hi·ªÉn th·ªã tr·ª£ gi√∫p
show_help() {
    cat << EOF
S·ª≠ d·ª•ng: $0 [OPTIONS]

OPTIONS:
    --silent    Ch·∫°y ·ªü ch·∫ø ƒë·ªô im l·∫∑ng (kh√¥ng h·ªèi ng∆∞·ªùi d√πng)
    --help, -h  Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y

V√≠ d·ª•:
    $0                  # Ch·∫°y ·ªü ch·∫ø ƒë·ªô t∆∞∆°ng t√°c
    $0 --silent         # Ch·∫°y ·ªü ch·∫ø ƒë·ªô im l·∫∑ng

EOF
}

# H√†m thi·∫øt l·∫≠p logging
setup_logging() {
    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
    mkdir -p "$LOG_DIR"
    
    # Redirect output v√†o file log
    exec > >(tee -a "$LOG_FILE")
    exec 2>&1
    
    log_info "Logging ƒë∆∞·ª£c thi·∫øt l·∫≠p: $LOG_FILE"
}

# H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán ti·ªÅn c√†i ƒë·∫∑t
preflight_checks() {
    log_step "Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti·ªÅn c√†i ƒë·∫∑t"
    
    # Ki·ªÉm tra quy·ªÅn root
    if [[ $EUID -ne 0 ]]; then
        log_error "Script c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root!"
        exit 1
    fi
    
    # Ki·ªÉm tra Ubuntu version
    if ! grep -q "Ubuntu 24.04" /etc/os-release; then
        log_error "Script ch·ªâ h·ªó tr·ª£ Ubuntu 24.04"
        exit 1
    fi
    
    # Thu th·∫≠p th√¥ng tin h·ªá th·ªëng
    RAM_GB=$(free -g | awk '/^Mem:/{print $2}')
    CPU_CORES=$(nproc)
    DISK_SPACE=$(df -h / | awk 'NR==2{print $4}')
    
    log_info "Th√¥ng tin h·ªá th·ªëng:"
    log_info "  - RAM: ${RAM_GB}GB"
    log_info "  - CPU: ${CPU_CORES} cores"
    log_info "  - Dung l∆∞·ª£ng tr·ªëng: ${DISK_SPACE}"
    
    # Ki·ªÉm tra RAM t·ªëi thi·ªÉu (1GB)
    if [[ $RAM_GB -lt 1 ]]; then
        log_warning "RAM th·∫•p (<1GB). Script v·∫´n ti·∫øp t·ª•c nh∆∞ng c√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ."
    fi
    
    log_success "Ki·ªÉm tra ƒëi·ªÅu ki·ªán ho√†n t·∫•t"
}

# H√†m ki·ªÉm tra tr·∫°ng th√°i c√†i ƒë·∫∑t
check_installation_status() {
    if [[ -f "$INSTALL_MARKER_FILE" ]]; then
        log_info "Ph√°t hi·ªán c√†i ƒë·∫∑t tr∆∞·ªõc ƒë√≥"
        return 0  # ƒê√£ c√†i ƒë·∫∑t
    else
        return 1  # Ch∆∞a c√†i ƒë·∫∑t
    fi
}

# H√†m ch·∫°y module
run_module() {
    local module_name="$1"
    local module_path="$MODULES_DIR/ubuntu/24/$module_name"
    
    if [[ -f "$module_path" ]]; then
        log_step "Ch·∫°y module: $module_name"
        bash "$module_path"
        log_success "Module $module_name ho√†n t·∫•t"
    else
        log_error "Kh√¥ng t√¨m th·∫•y module: $module_path"
        exit 1
    fi
}

# Menu c√†i ƒë·∫∑t ban ƒë·∫ßu
show_installation_menu() {
    cat << EOF

============================================
      VPS Management Script v$SCRIPT_VERSION
============================================

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi script qu·∫£n l√Ω VPS!
Script n√†y s·∫Ω c√†i ƒë·∫∑t LEMP stack ho√†n ch·ªânh bao g·ªìm:

üì¶ C√°c th√†nh ph·∫ßn s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t:
  ‚Ä¢ Nginx (Web server)
  ‚Ä¢ MariaDB (Database server) 
  ‚Ä¢ PHP 7.4 & 8.3 (with PHP-FPM)
  ‚Ä¢ Redis (Caching server)
  ‚Ä¢ Certbot (SSL certificates)
  ‚Ä¢ phpMyAdmin (Database management)
  ‚Ä¢ UFW Firewall (Security)

‚ö†Ô∏è  L∆∞u √Ω quan tr·ªçng:
  ‚Ä¢ Script c·∫ßn k·∫øt n·ªëi Internet ƒë·ªÉ t·∫£i packages
  ‚Ä¢ Qu√° tr√¨nh c√†i ƒë·∫∑t c√≥ th·ªÉ m·∫•t 10-15 ph√∫t
  ‚Ä¢ T·∫•t c·∫£ c·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c backup t·ª± ƒë·ªông

EOF

    if [[ "$SILENT_MODE" == "false" ]]; then
        echo -n "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c c√†i ƒë·∫∑t? (y/N): "
        read -r confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_info "C√†i ƒë·∫∑t ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng"
            exit 0
        fi
    fi
}

# Menu qu·∫£n l√Ω (sau khi ƒë√£ c√†i ƒë·∫∑t)
show_management_menu() {
    while true; do
        cat << EOF

============================================
      VPS Management - Menu Qu·∫£n l√Ω
============================================

1. üåê Qu·∫£n l√Ω Website
2. üóÑÔ∏è  Qu·∫£n l√Ω Database  
3. üîí Qu·∫£n l√Ω SSL Certificate
4. üìä Xem tr·∫°ng th√°i h·ªá th·ªëng
5. üîß C·∫•u h√¨nh n√¢ng cao
6. üìã Xem logs
7. üîÑ C·∫≠p nh·∫≠t script
8. ‚ùå Tho√°t

EOF

        echo -n "Ch·ªçn t√πy ch·ªçn (1-8): "
        read -r choice
        
        case $choice in
            1) run_module "10_manage_website.sh" ;;
            2) manage_database ;;
            3) manage_ssl ;;
            4) show_system_status ;;
            5) advanced_config ;;
            6) show_logs ;;
            7) update_script ;;
            8) 
                log_info "T·∫°m bi·ªát!"
                exit 0
                ;;
            *)
                log_warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
                ;;
        esac
    done
}

# H√†m c√†i ƒë·∫∑t ch√≠nh
main_installation() {
    log_step "B·∫Øt ƒë·∫ßu qu√° tr√¨nh c√†i ƒë·∫∑t LEMP stack"
    
    # Giai ƒëo·∫°n 1: Chu·∫©n b·ªã h·ªá th·ªëng
    run_module "00_prepare_system.sh"
    
    # Giai ƒëo·∫°n 2: C√†i ƒë·∫∑t Nginx
    run_module "01_install_nginx.sh"
    
    # Giai ƒëo·∫°n 3: C√†i ƒë·∫∑t MariaDB
    run_module "02_install_mariadb.sh"
    
    # Giai ƒëo·∫°n 4: C√†i ƒë·∫∑t PHP
    run_module "03_install_php.sh"
    
    # Giai ƒëo·∫°n 5: C√†i ƒë·∫∑t Redis
    run_module "04_install_redis.sh"
    
    # Giai ƒëo·∫°n 6: C√†i ƒë·∫∑t Tools
    run_module "05_install_tools.sh"
    
    # ƒê√°nh d·∫•u ƒë√£ c√†i ƒë·∫∑t xong
    touch "$INSTALL_MARKER_FILE"
    
    # Hi·ªÉn th·ªã th√¥ng tin t√≥m t·∫Øt
    show_installation_summary
    
    log_success "üéâ C√†i ƒë·∫∑t ho√†n t·∫•t! LEMP stack ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng."
}

# H√†m hi·ªÉn th·ªã t√≥m t·∫Øt sau c√†i ƒë·∫∑t
show_installation_summary() {
    local mysql_root_password
    mysql_root_password=$(grep "MYSQL_ROOT_PASSWORD" "$CREDENTIALS_FILE" | cut -d'=' -f2)
    
    cat << EOF

============================================
        üìã TH√îNG TIN C√ÄI ƒê·∫∂T
============================================

üåê Web Server: Nginx ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông
üóÑÔ∏è  Database: MariaDB v·ªõi m·∫≠t kh·∫©u root ƒë√£ ƒë∆∞·ª£c t·∫°o
üêò PHP: Phi√™n b·∫£n 7.4 v√† 8.3 ƒë√£ s·∫µn s√†ng
‚ö° Redis: Server caching ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
üîí SSL: Certbot ƒë√£ s·∫µn s√†ng cho HTTPS
üõ°Ô∏è  Firewall: UFW ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t

üìÅ Th√¥ng tin ƒëƒÉng nh·∫≠p:
  ‚Ä¢ File credentials: $CREDENTIALS_FILE
  ‚Ä¢ MariaDB root password: $mysql_root_password
  ‚Ä¢ phpMyAdmin: http://your-ip/phpmyadmin

üìÇ ƒê∆∞·ªùng d·∫´n quan tr·ªçng:
  ‚Ä¢ Web root: /var/www/html
  ‚Ä¢ Nginx config: /etc/nginx/sites-available/
  ‚Ä¢ PHP config: /etc/php/*/fpm/php.ini
  ‚Ä¢ Logs: $LOG_DIR

‚ö†Ô∏è  L∆∞u √Ω b·∫£o m·∫≠t:
  ‚Ä¢ H√£y ƒë·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
  ‚Ä¢ C·∫•u h√¨nh SSL cho domain c·ªßa b·∫°n
  ‚Ä¢ Th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t h·ªá th·ªëng

============================================

EOF
}

# Placeholder functions (s·∫Ω ƒë∆∞·ª£c implement sau)
manage_database() {
    log_info "Ch·ª©c nƒÉng qu·∫£n l√Ω database ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
}

manage_ssl() {
    log_info "Ch·ª©c nƒÉng qu·∫£n l√Ω SSL ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
}

show_system_status() {
    log_info "Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng..."
    systemctl status nginx mariadb php*-fpm redis-server --no-pager
}

advanced_config() {
    log_info "C·∫•u h√¨nh n√¢ng cao ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
}

show_logs() {
    log_info "Hi·ªÉn th·ªã 50 d√≤ng cu·ªëi c·ªßa log..."
    tail -50 "$LOG_FILE"
}

update_script() {
    log_info "Ch·ª©c nƒÉng c·∫≠p nh·∫≠t script ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn..."
}

# H√†m ch√≠nh
main() {
    # Thi·∫øt l·∫≠p logging
    setup_logging
    
    # Ph√¢n t√≠ch tham s·ªë
    parse_arguments "$@"
    
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti·ªÅn c√†i ƒë·∫∑t
    preflight_checks
    
    # Ki·ªÉm tra tr·∫°ng th√°i c√†i ƒë·∫∑t
    if check_installation_status; then
        # ƒê√£ c√†i ƒë·∫∑t - hi·ªÉn th·ªã menu qu·∫£n l√Ω
        show_management_menu
    else
        # Ch∆∞a c√†i ƒë·∫∑t - b·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t
        show_installation_menu
        main_installation
    fi
}

# X·ª≠ l√Ω t√≠n hi·ªáu ng·∫Øt
trap 'log_error "Script b·ªã ng·∫Øt b·ªüi ng∆∞·ªùi d√πng"; exit 1' INT TERM

# Ch·∫°y h√†m ch√≠nh
main "$@"
